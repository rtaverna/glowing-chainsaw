{"version":3,"file":"react-photo-grid.esm.js","sources":["../src/ReactPhotoGrid.tsx"],"sourcesContent":["import * as React from \"react\";\n\n// TODO - element resize event is not working\nvar imageElements: Array<HTMLImageElement> = [];\n\nfunction imageLoadCallback(\n  id: string,\n  callback: (id: string, width: number, height: number) => void\n) {\n  return function (this: HTMLImageElement) {\n    callback(id, this.naturalWidth, this.naturalHeight);\n  };\n}\n\nfunction getImageDimensions(\n  src: string,\n  id: string,\n  cb: (id: string, width: number, height: number) => void\n) {\n  var img = new Image();\n  img.id = id;\n  imageElements.push(img);\n  img.addEventListener(\"load\", imageLoadCallback(id, cb));\n\n  img.src = src;\n}\n\nfunction isString(str: unknown) {\n  return typeof str === \"string\";\n}\n\nfunction first<T>(arr: Array<T>): T {\n  return arr[0];\n}\n\nfunction without<T>(arr: Array<T>, exclude: T): Array<T> {\n  return arr.filter((item) => item !== exclude);\n}\n\nfunction findIndex<T>(arr: Array<T>, pred: (val: T) => boolean): number {\n  return arr.reduce((acc, val, index) => {\n    if (acc >= 0) {\n      return acc;\n    }\n\n    return pred(val) ? index : acc;\n  }, -1);\n}\n\nfunction all<T>(arr: Array<T>, pred: (val: T) => boolean): boolean {\n  return arr.reduce((acc: boolean, item: T) => {\n    return pred(item) && acc;\n  }, true);\n}\n\nfunction max<T>(arr: Array<T>, iteratee: (arg0: T) => number) {\n  return arr.reduce((acc, item) => {\n    if (iteratee(item) > iteratee(acc)) {\n      return item;\n    } else {\n      return acc;\n    }\n  }, arr[0]);\n}\n\ninterface ImageData {\n  id: string;\n  src: string;\n}\n\ntype StateImageData = ImageData & {\n  width: number;\n  height: number;\n};\n\ninterface Props {\n  data: Array<string> | Array<ImageData>;\n  onImageClick: (image: string) => void;\n  gridSize?: string;\n  containerWidth?: number;\n}\n\ninterface State {\n  ladyLuck: number;\n  containerWidth: number;\n  containerHeight: number;\n  imagesToShow: Array<StateImageData>;\n}\n\nclass ReactPhotoGrid extends React.Component<Props, State> {\n  private containerRef = React.createRef<HTMLDivElement>();\n\n  constructor(props: Props) {\n    super(props);\n\n    const defaultContainerWidth = 500;\n    const defaultContainerHeight = 500;\n\n    let containerWidth = defaultContainerWidth;\n    let containerHeight = defaultContainerHeight;\n\n    if (this.props.gridSize) {\n      var container = this.props.gridSize.split(\"x\");\n      containerWidth = parseInt(container[0], 10) || defaultContainerWidth;\n      containerHeight = parseInt(container[1], 10) || defaultContainerHeight;\n    }\n\n    const imageData =\n      this.props.data.length <= 4\n        ? this.props.data\n        : this.props.data.slice(0, 4);\n    let imagesToShow;\n\n    // take care of variations in property data\n    // if someone just passes an array of path strings\n    if (imageData[0] && isString(imageData[0])) {\n      imagesToShow = (imageData as Array<string>).map(function (\n        imagePath: string\n      ) {\n        return {\n          id: `${Math.random() * 1000}`,\n          src: imagePath,\n          width: 0,\n          height: 0,\n        };\n      });\n    } else {\n      imagesToShow = (imageData as Array<ImageData>).map(function (\n        image: ImageData\n      ) {\n        return {\n          id: image.id || `${Math.random() * 1000}`,\n          src: image.src, // in case someone supplies a src property instead of path\n          ...image,\n          width: 0,\n          height: 0,\n        };\n      });\n    }\n\n    var state = {\n      ladyLuck: Math.floor(Math.random() * 2),\n      containerWidth: containerWidth,\n      containerHeight: containerHeight,\n      imagesToShow,\n    };\n\n    if (this.props.containerWidth) {\n      state.containerWidth = this.props.containerWidth;\n    }\n\n    this.state = state;\n  }\n\n  componentWillUnmount() {\n    imageElements.forEach((imageElement) => {\n      imageElement.removeEventListener(\n        \"load\",\n        imageLoadCallback(imageElement.id, this.recalculateGrid)\n      );\n    });\n  }\n\n  componentDidMount() {\n    this.state.imagesToShow.forEach((image: StateImageData) => {\n      getImageDimensions(image.src, image.id, this.recalculateGrid);\n    }, this);\n\n    // only set it to parents width/height if no gridsize is provided\n    if (\n      !this.props.gridSize &&\n      this.containerRef &&\n      this.containerRef.current\n    ) {\n      this.setState({\n        containerWidth: this.containerRef.current.offsetWidth,\n        containerHeight: this.containerRef.current.offsetWidth,\n      });\n    }\n\n    // $(ReactDOM.findDOMNode(this)..resize(this.onResize);\n    // elementResizeEvent(ReactDOM.findDOMNode(this). this.onResize);\n  }\n\n  // Throttle updates to 60 FPS.\n  onResize = () => {\n    if (this.containerRef && this.containerRef.current) {\n      this.setState({\n        containerWidth: this.containerRef.current.offsetWidth,\n        containerHeight: this.containerRef.current.offsetWidth,\n      });\n    }\n  };\n\n  handleImageClick = (imageSrc: string) => {\n    this.props.onImageClick && this.props.onImageClick(imageSrc);\n  };\n\n  recalculateGrid = (id: string, width: number, height: number) => {\n    var _imagesToShow = [...this.state.imagesToShow];\n\n    var imageIndex = findIndex(_imagesToShow, (image) => image.id === id);\n    _imagesToShow[imageIndex].width = width;\n    _imagesToShow[imageIndex].height = height;\n    var indexForMaxDimensionImage = 0;\n    var container = {\n      width: this.state.containerWidth,\n      height: this.state.containerHeight,\n    };\n\n    var contenders = [\"Width\", \"Height\"];\n    var winner = contenders[this.state.ladyLuck].toLowerCase() as\n      | \"width\"\n      | \"height\";\n    var loser = first(\n      without(contenders, contenders[this.state.ladyLuck])\n    ).toLowerCase() as \"width\" | \"height\";\n\n    // if all the images have width and height, we can rotate the array around the image with max height,\n    // so that the first image has the max height and can be displayed properly on the left side\n    if (\n      all(_imagesToShow, (image: StateImageData) => {\n        return !!(image.width && image.height);\n      })\n    ) {\n      // TODO - the logic should not only look the the image with max height but with height >= containerHeight and max(height/width ratio)\n\n      var maxDimensionImage = max(_imagesToShow, (image) => image[winner]);\n\n      indexForMaxDimensionImage = findIndex(\n        _imagesToShow,\n        (image) => image.id === maxDimensionImage.id\n      );\n\n      if (\n        _imagesToShow[indexForMaxDimensionImage][winner] < container[winner]\n      ) {\n        container[winner] = _imagesToShow[indexForMaxDimensionImage][winner];\n        container[loser] = container[winner];\n      }\n\n      var indexForBestMaxImage = _imagesToShow.reduce(function (\n        result,\n        image,\n        index\n      ) {\n        if (\n          image[winner] >= container[winner] &&\n          image[winner] / image[loser] >\n            _imagesToShow[result][winner] / _imagesToShow[result][loser]\n        ) {\n          return index;\n        }\n        return result;\n      },\n      0);\n\n      _imagesToShow.push.apply(\n        _imagesToShow,\n        _imagesToShow.splice(0, indexForBestMaxImage)\n      );\n      this.setState({\n        imagesToShow: _imagesToShow,\n        containerHeight: container.height,\n        containerWidth: container.width,\n      });\n    }\n  };\n\n  getComponentStyles = (images: Array<StateImageData>) => {\n    var numberOfImages = images.length;\n\n    var marginSetters = [\"Bottom\", \"Right\"];\n    var contenders = [\"Width\", \"Height\"];\n    var winner = contenders[this.state.ladyLuck] as \"Width\" | \"Height\";\n    var loser = first(without(contenders, winner));\n    var marginWinner = marginSetters[this.state.ladyLuck];\n    var marginLoser = first(without(marginSetters, marginWinner));\n\n    var smallestDimensionRaw = Math.floor(\n      this.state[`container${winner}` as \"containerWidth\"] /\n        (numberOfImages - 1)\n    );\n    var margin = 2;\n    var smallImageDimension = smallestDimensionRaw - margin;\n    var styles: Array<any> = [];\n    var commonStyle = {\n      display: \"inline-block\",\n      position: \"relative\",\n      overflow: \"hidden\",\n      float: \"left\",\n      verticalAlign: \"top\",\n      cursor: \"pointer\",\n    };\n\n    switch (numberOfImages) {\n      case 0:\n        break;\n      case 1:\n        // set some big numbers in case width and height not provided\n        if (!images[0].width) images[0].width = 1000000;\n        if (!images[0].height) images[0].height = 1000000;\n\n        if (images[0].width > images[0].height) {\n          styles = [\n            {\n              width:\n                Math.min(this.state.containerWidth, images[0].width) - margin,\n              height:\n                (Math.min(this.state.containerWidth, images[0].width) *\n                  images[0].height) /\n                  images[0].width -\n                margin,\n              margin: margin,\n            },\n          ];\n        } else {\n          styles = [\n            {\n              width:\n                (Math.min(this.state.containerHeight, images[0].height) *\n                  images[0].width) /\n                  images[0].height -\n                margin,\n              height:\n                Math.min(this.state.containerHeight, images[0].height) - margin,\n              margin: margin,\n            },\n          ];\n        }\n        break;\n      case 2:\n        styles[0] = styles[1] = {};\n\n        styles[0][winner.toLowerCase() as \"width\" | \"height\"] = styles[1][\n          winner.toLowerCase() as \"width\" | \"height\"\n        ] =\n          this.state[\n            `container${winner}` as \"containerWidth\" | \"containerHeight\"\n          ] - margin;\n        styles[0][loser.toLowerCase()] = styles[1][loser.toLowerCase()] =\n          Math.min(smallImageDimension / 2) - margin;\n        styles[0][\"margin\" + marginWinner] = margin;\n        break;\n      default:\n        styles[0] = {};\n        styles[0][winner.toLowerCase()] = this.state[\n          `container${winner}` as \"containerWidth\" | \"containerHeight\"\n        ];\n        styles[0][loser.toLowerCase()] =\n          smallImageDimension * (numberOfImages - 2);\n        styles[0][\"margin\" + marginWinner] = margin;\n        var styleForSmallerImages: any = {\n          width: smallImageDimension,\n          height: smallImageDimension,\n        };\n        styleForSmallerImages[\"margin\" + marginLoser] = margin;\n\n        for (var i = 1; i < numberOfImages && i < 4; i++) {\n          // cloning is important here because otherwise changing the dimension of last image changes it for everyone\n          styles.push({ ...styleForSmallerImages });\n        }\n\n        // adjust the width/height of the last image in case of round off errors in division\n        styles[numberOfImages - 1][winner.toLowerCase()] +=\n          styles[0][winner.toLowerCase()] -\n          smallImageDimension * (numberOfImages - 1) -\n          margin * (numberOfImages - 2);\n        styles[numberOfImages - 1][\"margin\" + marginLoser] = 0;\n    }\n\n    return styles.map(function (style) {\n      return {\n        ...commonStyle,\n        ...style,\n      };\n    });\n  };\n\n  render() {\n    var componentStyles = this.getComponentStyles(this.state.imagesToShow);\n\n    var images = this.state.imagesToShow.map((image, index) => {\n      var componentStyle = componentStyles[index];\n\n      // max width and height has to be dynamic depending on this image's dimensions\n      var imageStyle;\n\n      if (\n        image.width &&\n        image.height &&\n        componentStyle.width &&\n        componentStyle.height\n      ) {\n        if (\n          image.width <= componentStyle.width ||\n          image.height <= componentStyle.height\n        ) {\n          // do nothing\n        } else if (\n          image.width / componentStyle.width <\n          image.height / componentStyle.height\n        ) {\n          imageStyle = {\n            maxWidth: componentStyle.width,\n          };\n        } else {\n          imageStyle = {\n            maxHeight: componentStyle.height,\n          };\n        }\n      }\n\n      return (\n        <div key={\"image_\" + index} style={componentStyle}>\n          <img\n            style={imageStyle}\n            src={image.src}\n            onClick={() => this.handleImageClick(image.src)}\n          />\n        </div>\n      );\n    }, this);\n\n    var containerStyle = {\n      width: this.state.containerWidth,\n      height: this.state.containerWidth,\n      backgroundColor: \"white\",\n    };\n    // the outer div is needed so that container width can be recalculated based on the parent container width (which the outer div inherits\n    // the div inside the outer div is assigned a width in the first render itself. so that doesn't work out while trying to reset container width\n    return (\n      <div>\n        <div style={containerStyle}>\n          {images}\n          <div style={{ clear: \"both\" }} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ReactPhotoGrid;\n"],"names":["imageElements","imageLoadCallback","id","callback","naturalWidth","naturalHeight","getImageDimensions","src","cb","img","Image","push","addEventListener","isString","str","first","arr","without","exclude","filter","item","findIndex","pred","reduce","acc","val","index","all","max","iteratee","ReactPhotoGrid","props","React","containerRef","current","setState","containerWidth","offsetWidth","containerHeight","imageSrc","onImageClick","width","height","_imagesToShow","state","imagesToShow","imageIndex","image","indexForMaxDimensionImage","container","contenders","winner","ladyLuck","toLowerCase","loser","maxDimensionImage","indexForBestMaxImage","result","apply","splice","images","numberOfImages","length","marginSetters","marginWinner","marginLoser","smallestDimensionRaw","Math","floor","margin","smallImageDimension","styles","commonStyle","display","position","overflow","float","verticalAlign","cursor","min","styleForSmallerImages","i","map","style","defaultContainerWidth","defaultContainerHeight","gridSize","split","parseInt","imageData","data","slice","imagePath","random","componentWillUnmount","forEach","imageElement","removeEventListener","recalculateGrid","componentDidMount","render","componentStyles","getComponentStyles","componentStyle","imageStyle","maxWidth","maxHeight","key","onClick","handleImageClick","containerStyle","backgroundColor","clear"],"mappings":"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"}